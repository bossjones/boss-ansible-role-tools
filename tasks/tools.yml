##############################################################################
# Install prereqs for perf/tools
##############################################################################
---
- name: Upgrade all packages to the latest version
  apt:
    name: "*"
    state: latest
    force_apt_get: yes
    update_cache: yes
    cache_valid_time: 86400 #One day
  become: '{{ item }}'
  with_items:
    - true  # Run as root

- name: install go
  unarchive:
    src: 'https://storage.googleapis.com/golang/go{{ go_version }}.linux-{{ sys_arch }}.tar.gz'
    remote_src: yes
    dest: /usr/local
    mode: 0777
    creates: /usr/local/go/bin/go

# export PATH=$PATH:/usr/local/go/bin:${HOME}/go/bin
- name: set go env. vars. and add go to path
  blockinfile:
    dest: '$HOME/.bashrc'
    block: |
      export PATH=$PATH:/usr/local/go/bin
      export GOPATH=$HOME
    state: present
    create: yes
    mode: 0644
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user

- name: set fact env_go
  set_fact:
    env_go: '{{ env_go |default({}) | combine ({"PATH" : "/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/local/go/bin"  }) | combine ({"GOPATH" :"$HOME"}) }}'

- name: install fzy - A better fuzzy finder
  shell: |
    curl -L 'https://github.com/jhawthorn/fzy/releases/download/0.9/fzy_0.9-1_amd64.deb' > /usr/local/src/fzy_0.9-1_amd64.deb
    apt install -y /usr/local/src/fzy_0.9-1_amd64.deb
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/bin/fzy


- name: install hyperfine - A command-line benchmarking tool
  shell: |
    curl -L 'https://github.com/sharkdp/hyperfine/releases/download/v1.5.0/hyperfine_1.5.0_amd64.deb' > /usr/local/src/hyperfine_1.5.0_amd64.deb
    apt install -y /usr/local/src/hyperfine_1.5.0_amd64.deb
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/bin/hyperfine

# https://github.com/sharkdp/vivid
- name: install vivid -A generator for LS_COLORS with support for multiple color themes
  shell: |
    curl -L 'https://github.com/sharkdp/vivid/releases/download/v0.4.0/vivid_0.4.0_amd64.deb' > /usr/local/src/vivid_0.4.0_amd64.deb
    apt install -y /usr/local/src/vivid_0.4.0_amd64.deb
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/bin/vivid

# wget "https://github.com/sharkdp/vivid/releases/download/v0.4.0/vivid_0.4.0_amd64.deb"
# sudo dpkg -i vivid_0.4.0_amd64.deb

# wget https://github.com/sharkdp/hyperfine/releases/download/v1.5.0/hyperfine_1.5.0_amd64.deb
# sudo dpkg -i hyperfine_1.5.0_amd64.deb

- name: install ripgrep
  shell: |
    curl -L 'https://github.com/BurntSushi/ripgrep/releases/download/0.10.0/ripgrep_0.10.0_amd64.deb' > /usr/local/src/ripgrep_0.10.0_amd64.deb
    apt install -y /usr/local/src/ripgrep_0.10.0_amd64.deb
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/bin/rg

- name: "Install ubuntu-make"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - ubuntu-make

- name: "Install prereq tools"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - nethogs
      - ccze
      - htop
      - silversearcher-ag
      - netcat
      - nmap
      - netperf
      - ngrep
      - unzip
      - nload
      - jq
      - ncdu
      - traceroute
      - sysstat
      # - ssldump
      # - sslsplit
      - conntrack
      # NOTE: RUN THIS GUY
      - mtr
      - tmux
      # SOURCE: https://www.tecmint.com/test-network-throughput-in-linux/
      - iperf3
      # SOURCE: https://www.tecmint.com/tcpflow-analyze-debug-network-traffic-in-linux/
      - tcpflow
      # SOURCE: https://www.tecmint.com/linux-network-bandwidth-monitoring-tools/
      - iftop
      - procps
      - dstat
      - ifstat
      - tcpstat
      - atop
      - iotop
      - itop
      - latencytop
      # - ntop
      - tiptop
      - sntop
      - virt-top
      - jnettop
      - kerneltop
      - logtop
      - nicstat
      - xclip
      - perf-tools-unstable
      - bonnie++
      - gnuplot
      - iozone3
      - tree
      - ruby2.3-dev

# SOURCE: https://gist.github.com/kometchtech/c5681b2a70b30c99bf7e834ffb3abba5
- name: "Install dnsperf prereqs"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - bind9utils
      - libbind-dev
      - libkrb5-dev
      - libssl-dev
      - libcap-dev
      - libxml2-dev
      - geoip-bin
      - libgeoip-dev
      - build-essential
      - curl
      # REQUIRED: https://www.tecmint.com/hegemon-system-monitoring-tool-for-linux/
      - libsensors4-dev

- name: "Install python-deps"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - python3-dev
      - python-dev
      - python3-pip
      - python-pip

- name: check if /usr/bin/sysdig exists
  stat:
    path: /usr/bin/sysdig
  register: sysdig_result
  failed_when: false
  changed_when: false
  tags:
    - slow

- name: "SYSDIG: curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash ONLY if it is not installed already"
  shell: |
    bash -lc "curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash"
  args:
    executable: /bin/bash
  when: not sysdig_result.stat.exists
  tags:
    - slow

# MORE TOOLS FROM: https://medium.com/@jonyeezs/my-minimal-over-powered-linux-setup-guide-710931efb75b

- name: install fzf for root and default user
  shell: |
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --all
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/.fzf'
  with_items:
    - true  # Run as root
    - false
  tags:
  - fzf

- name: install perf-tools for root and default user
  shell: |
    git clone --depth 1 https://github.com/brendangregg/perf-tools ~/perf-tools
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/perf-tools'
  with_items:
    - true  # Run as root
    - false
  tags:
  - perf-tools

- name: install FlameGraph for root and default user
  shell: |
    git clone https://github.com/brendangregg/FlameGraph ~/FlameGraph
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/FlameGraph'
  with_items:
    - true  # Run as root
    - false
  tags:
  - perf-tools

# FIXME: Find a way to run this in nginx
- name: install d3-flame-graph for root and default user
  shell: |
    git clone https://github.com/spiermar/d3-flame-graph ~/d3-flame-graph
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/d3-flame-graph'
  with_items:
    - true  # Run as root
    - false
  tags:
  - perf-tools
  # NOTE: How to run this !!!
  # $ git clone https://github.com/spiermar/d3-flame-graph.git
  # $ cd d3-flame-graph
  # $ npm install
  # $ gulp serve

- name: install kubernetes-perf-tools for root and default user
  shell: |
    git clone --depth 1 https://github.com/kubernetes/perf-tests.git ~/kubernetes-perf-tools
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/kubernetes-perf-tools'
  with_items:
    - true  # Run as root
    - false
  tags:
  - kube

# git@github.com:kubernetes/perf-tests.git

- name: install fzf for root and default user
  shell: |
    git clone https://github.com/b4b4r07/enhancd ~/.enhancd
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/.enhancd'
  with_items:
    - true  # Run as root
    - false
  tags:
  - enhanced

- name: source ~/.enhancd/init.sh to root/ssh user bashrc
  lineinfile:
    path: '$HOME/.bashrc'
    line: 'source ~/.enhancd/init.sh'
    create: yes
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user

- name: "ENHANCD_FILTER=fzy:fzf; export ENHANCD_FILTER to root/ssh user bashrc"
  lineinfile:
    path: '$HOME/.bashrc'
    line: 'ENHANCD_FILTER=fzy:fzf; export ENHANCD_FILTER'
    create: yes
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user

- name: "ENHANCD_HOOK_AFTER_CD='ls -A';export ENHANCD_HOOK_AFTER_CD to root/ssh user bashrc"
  lineinfile:
    path: '$HOME/.bashrc'
    line: "ENHANCD_HOOK_AFTER_CD='ls -A';export ENHANCD_HOOK_AFTER_CD"
    create: yes
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user

- name: install tldr - Simplified and community-driven man pages
  shell: |
    curl -L 'https://raw.githubusercontent.com/raylee/tldr/master/tldr' > /usr/local/bin/tldr
    chmod +x /usr/local/bin/tldr
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/tldr
# https://github.com/spiermar/burn
- name: install burn - is a CLI tool to convert performance profiles to hierarchical data structures that can be visualized as flame graphs
  shell: |
    curl -L 'https://dl.bintray.com/mspier/binaries/burn/1.0.1/linux/amd64/burn' > /usr/local/bin/burn
    chmod +x /usr/local/bin/burn
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/burn


- name: install gkill - Interactice process killer for Linux and macOS
  shell: |
    curl -L 'https://github.com/heppu/gkill/releases/download/v1.0.2/gkill-linux-amd64' > /usr/local/bin/gkill
    chmod +x /usr/local/bin/gkill
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/gkill

# https://github.com/heppu/gkill/releases/download/v1.0.2/gkill-linux-amd64

- name: install grv - GRV — Git Repository Viewer
  shell: |
    curl -L 'https://github.com/rgburke/grv/releases/download/v0.1.2/grv_v0.1.2_linux64' > /usr/local/bin/grv
    chmod +x /usr/local/bin/grv
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/grv

- name: Add repositories
  apt_repository:
    repo: 'ppa:dawidd0811/neofetch'
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: "Install neofetch"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - neofetch

- name: install tmux bash completion
  shell: |
    curl -L 'https://raw.githubusercontent.com/Bash-it/bash-it/master/completion/available/tmux.completion.bash' > /etc/bash_completion.d/tmux ;
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /etc/bash_completion.d/tmux

- name: Install cheat
  pip:
    name: "cheat"

- name: Install tmuxp
  pip:
    name: "tmuxp"

- name: install ~/.cheat for root and default user
  shell: |
    git clone https://github.com/bossjones/boss-cheatsheets ~/.cheat
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/.cheat'
  with_items:
    - true  # Run as root
    - false
  tags:
  - cheat

- name: autocomplete ~/.cheat for root and default user
  shell: |
    curl 'https://raw.githubusercontent.com/chrisallenlane/cheat/master/cheat/autocompletion/cheat.bash' > /etc/bash_completion.d/cheat ;
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '/etc/bash_completion.d/cheat'
  with_items:
    - true  # Run as root
  tags:
  - cheat

- name: Install cheat
  pip:
    name: "cheat"

# https://github.com/nodesource/distributions/blob/master/README.md
- name: install node version v11.4.0
  shell: |
    curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -
    apt-get install -y nodejs
    apt-get install -y gcc g++ make
    npm install gtop -g
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '/usr/bin/npm'
  with_items:
    - true  # Run as root
  tags:
  - node
  - npm

# SOURCE: https://github.com/iovisor/bcc/blob/master/INSTALL.md
# FIXME: https://github.com/pypa/pip/issues/5240
# curl https://bootstrap.pypa.io/get-pip.py | python3
# pip2 install --upgrade pip

# https://github.com/nodesource/distributions/blob/master/README.md
- name: Install latest python pip for python3 and python2
  shell: |
    curl https://bootstrap.pypa.io/get-pip.py | python3
    pip2 install --upgrade pip
  become: '{{ item }}'
  args:
    executable: /bin/bash
  with_items:
    - true  # Run as root
  ignore_errors: yes
  tags:
  - pip
  - python-pip

- name: 'Add an apt key by id from a keyserver - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD'
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 4052245BD4284CDD
    state: present

# Add specified repository into sources list using specified filename.
- name: add bcc repo on xenial
  apt_repository:
    repo: deb https://repo.iovisor.org/apt/{{ansible_distribution_release}} {{ansible_distribution_release}} main
    state: present
    update_cache: yes
    filename: iovisor.list
  when: ansible_os_family == "Debian"

- name: 'uname -r'
  shell: uname -r
  ignore_errors: yes
  failed_when: false
  changed_when: false
  register: uname_result

- debug: msg="{{ uname_result.stdout }}"

- name: "Install bcc"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - bcc-tools
      - libbcc-examples
      - "linux-headers-{{ uname_result.stdout }}"
      # NOTE: These are required for perf to work
      # SOURCE: http://www.brendangregg.com/perf.html#Prerequisites
      # SOURCE: https://github.com/brendangregg/perf-tools
      # SOURCE: http://www.brendangregg.com/HeatMaps/latency.html
      - "linux-tools-{{ uname_result.stdout }}"
      - "linux-cloud-tools-{{ uname_result.stdout }}"
      - linux-tools-generic
      - linux-cloud-tools-generic

- name: git clone https://github.com/bossjones/tmux-config.git
  shell: |
    git clone https://github.com/bossjones/tmux-config.git ~/tmux-config || (cd ~/tmux-config ; git pull)
    ~/tmux-config/install.sh
    chdir=$HOME
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/tmux-config'
  with_items:
    - true  # Run as vagrant
    - false  # Run as vagrant
  tags:
  - tmux
  - tmux-config


- name: Add bcc-tools to path
  lineinfile:
    path: '$HOME/.bashrc'
    line: 'export PATH="/usr/share/bcc/tools:$PATH"'
    create: yes
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user

- name: "create /usr/local/bin/nfs-benchmark.sh"
  copy:
    content: |
      #!/usr/bin/env bash
      #
      # nfs-benchmark script
      # Version: MASTER branch
      # Author:  Bossjones
      #

      i=1
      until [ $i -gt 100 ]
      do
        echo "Running bonne++ $i of 100."
        echo ""
        echo "-----------------------------------------------------"
        bonnie++ -d /mnt/publicdata/ -s 2048 -r 1024 -u 65534 -g 65534
        echo ""
        echo ""
        i=$(( i+1 ))
      done



    dest: "/usr/local/bin/nfs-benchmark.sh"
    owner: "root"
    group: "root"
    mode: 0755


- name: "create /usr/local/bin/mtu-fix.sh"
  copy:
    content: |
      #!/usr/bin/env bash
      #
      # mtu-fix script
      # Version: MASTER branch
      # Author:  Bossjones
      # How To Enable Jumbo Frames In Linux - mtu 9000
      # SOURCE: https://linuxconfig.org/how-to-enable-jumbo-frames-in-linux

      for i in $(ip a l  | grep 'mtu 1500' | awk -F':' '{print $2}'); do
        ip link set $i mtu 9000
      done

    dest: "/usr/local/bin/mtu-fix.sh"
    owner: "root"
    group: "root"
    mode: 0755

- name: "create /usr/local/bin/nfsstat-top.sh"
  copy:
    content: |
      #!/usr/bin/env bash
      #
      # OPTIONS: https://linux.die.net/man/8/nfsstat
      # nfsstat-top script
      # Version: MASTER branch
      # Author:  Bossjones
      #

      watch "nfsstat -o all -234"



    dest: "/usr/local/bin/nfsstat-top.sh"
    owner: "root"
    group: "root"
    mode: 0755


- name: "create /usr/local/bin/nfsstat-report.sh"
  copy:
    content: |
      #!/usr/bin/env bash
      #
      # OPTIONS: https://linux.die.net/man/8/nfsstat
      # nfsstat-report script
      # Version: MASTER branch
      # Author:  Bossjones
      #

      echo "nfsstat-report"
      echo ""
      echo "[Show information about mounted NFS filesystems]"
      echo "-----------------------------------------------------"
      nfsstat -m | ccze -A
      echo ""
      echo ""
      echo "[Show all information about all versions of NFS]"
      echo "-----------------------------------------------------"
      nfsstat -o all -234 | ccze -A


    dest: "/usr/local/bin/nfsstat-report.sh"
    owner: "root"
    group: "root"
    mode: 0755


- name: "create /usr/local/bin/iozone-benchmark.sh"
  copy:
    content: |
      #!/usr/bin/env bash
      #
      # OPTIONS: https://linux.die.net/man/8/nfsstat
      # iozone-benchmark script
      # Version: MASTER branch
      # Author:  Bossjones
      #

      # SOURCE: http://nfs.sourceforge.net/nfs-howto/ar01s05.html
      # the benchmark should take 2-3 hours at most, but of course you will need to run it for each value of rsize and wsize that is of interest. The web site gives full documentation of the parameters, but the specific options used above are:

      # -a: Full automatic mode, which tests file sizes of 64K to 512M, using record sizes of 4K to 16M
      # -R: Generate report in excel spreadsheet form (The "surface plot" option for graphs is best)
      # -c: Include the file close time in the tests, which will pick up the NFS version 3 commit time
      # -U: Use the given mount point to unmount and remount between tests; it clears out caches
      # -f: When using unmount, you have to locate the test file in the mounted file system


      echo "iozone-benchmark"
      echo ""
      echo "[ONLY RUN THIS ON CLIENT MACHINES NOT THE NFS SERVER]"
      echo "-----------------------------------------------------"
      time iozone -a -R -c -U /mnt/publicdata -f /mnt/publicdata/testfile > /var/log/iozone-benchmark-logfile
      echo ""
      echo ""

    dest: "/usr/local/bin/iozone-benchmark.sh"
    owner: "root"
    group: "root"
    mode: 0755


- name: "Install prereq tools"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - nethogs
      - ccze
      - htop
      - silversearcher-ag
      - netcat
      - nmap
      - netperf
      - ngrep
      - unzip
      - nload
      - jq
      - ncdu
      - traceroute
      - sysstat
      # - ssldump
      # - sslsplit
      - conntrack
      # NOTE: RUN THIS GUY
      - mtr
      - tmux
      # SOURCE: https://www.tecmint.com/test-network-throughput-in-linux/
      - iperf3
      # SOURCE: https://www.tecmint.com/tcpflow-analyze-debug-network-traffic-in-linux/
      - tcpflow
      # SOURCE: https://www.tecmint.com/linux-network-bandwidth-monitoring-tools/
      - iftop

- debug: msg="tmuxinator"

- name: mkdir -p ~/.tmuxinator
  shell: |
    mkdir -p ~/.tmuxinator
  become: '{{ item }}'
  become_user: "{{bossjones__user}}"
  args:
    executable: /bin/bash
    creates: '$HOME/.tmuxinator'
  ignore_errors: yes
  with_items:
    - false  # Run as vagrant
  tags:
  - tmux
  - tmuxinator

- name: Generate /home/vagrant/.tmuxinator/perf.yaml file
  template:
    src: "home/vagrant/.tmuxinator/perf.yml.j2"
    dest: "/home/vagrant/.tmuxinator/perf.yml"
    mode: "0644"
  become: '{{ item }}'
  become_user: "{{bossjones__user}}"
  ignore_errors: yes
  with_items:
    - false  # Run as vagrant
  tags:
  - tmux
  - tmuxinator


- name: Generate /home/vagrant/.tmuxinator/debug.yaml file
  template:
    src: "home/vagrant/.tmuxinator/debug.yml.j2"
    dest: "/home/vagrant/.tmuxinator/debug.yml"
    mode: "0644"
  become: '{{ item }}'
  become_user: "{{bossjones__user}}"
  ignore_errors: yes
  with_items:
    - false  # Run as vagrant
  tags:
  - tmux
  - tmuxinator

# # SOURCE: https://github.com/rvm/rvm1-ansible/issues/46#issuecomment-278792283
# - name: Install gems
#   gem:
#     state: present
#     # chdir: "{{ ansible_user_dir }}"
#     executable: "{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}/bin/gem"
#     # gem_path: "{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}"
#     name: "{{item}}"
#   environment:
#     PATH: "{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}/bin:\
#             {{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}@global/bin:\
#             {{ ansible_user_dir }}/.rvm/rubies/ruby-{{ boss__tools__ruby_version }}/bin:\
#             {{ ansible_user_dir }}/.rvm/bin:\
#             {{ lookup('env', 'PATH') }}"
#     GEM_PATH: "{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}:\
#                 {{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}@global"
#   with_items:
#     - tmuxinator
#     - bundler
#   tags:
#   - rvm
#   - tmuxinator



# # - name: Install gems
# #   shell: |
# #     {{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}/bin/gem install {{item}}
# #   become: 'false'
# #   become_user: "{{bossjones__user}}"
# #   args:
# #     executable: /bin/bash
# #     creates: '{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}/bin/bundler'
# #   ignore_errors: yes
# #   environment:
# #     PATH: "{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}/bin:\
# #             {{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}@global/bin:\
# #             {{ ansible_user_dir }}/.rvm/rubies/ruby-{{ boss__tools__ruby_version }}/bin:\
# #             {{ ansible_user_dir }}/.rvm/bin:\
# #             {{ lookup('env', 'PATH') }}"
# #     GEM_PATH: "{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}:\
# #                 {{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}@global"
# #   with_items:
# #     - tmuxinator
# #     - bundler
# #   tags:
# #   - rvm
# #   - tmuxinator


- name: source $HOME/.rvm/scripts/rvm to root/ssh user bashrc
  lineinfile:
    path: '$HOME/.bashrc'
    line: 'source $HOME/.rvm/scripts/rvm'
    regexp: '^source $HOME/.rvm/scripts/rvm'
    # create: yes
    state: absent
  become: '{{ item }}'
  with_items:
    # - true  # Run as root
    - false # Run as SSH user

# - name: source $HOME/.rvm/scripts/rvm to root/ssh user bashrc
#   lineinfile:
#     path: '$HOME/.bash_profile'
#     line: 'source $HOME/.rvm/scripts/rvm'
#     create: yes
#   become: '{{ item }}'
#   with_items:
#     - true  # Run as root
#     - false # Run as SSH user

- name: source $HOME/.rvm/scripts/rvm to root/ssh user bash_profile
  lineinfile:
    path: '$HOME/.bash_profile'
    line: 'source $HOME/.rvm/scripts/rvm'
    regexp: '^source $HOME/.rvm/scripts/rvm'
    # create: yes
    state: absent
  become: '{{ item }}'
  with_items:
    # - true  # Run as root
    - false # Run as SSH user

- name: autocomplete rvm
  lineinfile:
    path: '$HOME/.bash_profile'
    line: '[[ -r $rvm_path/scripts/completion ]] && . $rvm_path/scripts/completion'
    create: yes
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user

- name: autocomplete rvm
  lineinfile:
    path: '$HOME/.bashrc'
    line: '[[ -r $rvm_path/scripts/completion ]] && . $rvm_path/scripts/completion'
    create: yes
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user

# \curl -sSL https://get.rvm.io | bash -s stable --ruby=jruby --gems=rails,puma
# curl -sSL https://get.rvm.io | bash -s stable --ruby
# \curl -sSL https://get.rvm.io | bash -s stable --with-default-gems="tmuxinator bundler"

- name: install rvm for base user
  shell: |
    gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB;
    \curl -sSL https://get.rvm.io | bash -s stable --ruby=2.4.2 --gems=tmuxinator,bundler;
  args:
    executable: /bin/bash
    creates: '$HOME/.rvm'
  register: rvm_install_global
  changed_when: false
  ignore_errors: yes
  failed_when: false
  check_mode: no
  become: yes
  become_user: "{{bossjones__user}}"

# source $HOME/.rvm/scripts/rvm

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
# export PATH="$PATH:$HOME/.rvm/bin"

- name: install gems for rvm version
  shell: $SHELL -lc "rvm use {{boss__tools__ruby_version}} --default; gem install {{item}}"
  args:
    executable: /bin/bash
    creates: '{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}/bin/bundler'
  register: rvm_install_global
  changed_when: false
  ignore_errors: yes
  environment:
    PATH: "{{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}/bin:\
            {{ ansible_user_dir }}/.rvm/gems/ruby-{{ boss__tools__ruby_version }}@global/bin:\
            {{ ansible_user_dir }}/.rvm/rubies/ruby-{{ boss__tools__ruby_version }}/bin:\
            {{ ansible_user_dir }}/.rvm/bin:\
            {{ lookup('env', 'PATH') }}"
  failed_when: false
  check_mode: no
  with_items:
    - tmuxinator
    - bundler
  become: yes
  become_user: "{{bossjones__user}}"


- name: 'This is for debug packages GPG Add an apt key by id from a keyserver - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F2EDC64DC5AEE1F6B9C621F0C8CAB6595FDFF622'
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: F2EDC64DC5AEE1F6B9C621F0C8CAB6595FDFF622
    state: present

# SOURCE: https://wiki.ubuntu.com/Debug%20Symbol%20Packages
# Add specified repository into sources list using specified filename.
- name: add debug packages repo on xenial
  apt_repository:
    repo: "{{item}}"
    state: present
    update_cache: yes
    filename: ddebs.list
  when: ansible_os_family == "Debian"
  with_items:
  - "deb http://ddebs.ubuntu.com {{ansible_distribution_release}} main restricted universe multiverse"
  - "deb http://ddebs.ubuntu.com {{ansible_distribution_release}}-updates main restricted universe multiverse"
  - "deb http://ddebs.ubuntu.com {{ansible_distribution_release}}-proposed main restricted universe multiverse"

# - name: Upgrade all packages to the latest version
#   apt:
#     name: "ubuntu-dbgsym-keyring"
#     state: latest
#     force_apt_get: yes
#     update_cache: yes
#     cache_valid_time: 86400 #One day
#   become: '{{ item }}'
#   with_items:
#     - true  # Run as root

- name: Generate /usr/local/bin/list-symbols-packages.sh file
  template:
    src: "list-symbols-packages.sh.j2"
    dest: "/usr/local/bin/list-symbols-packages.sh"
    mode: "0755"
  become: '{{ item }}'
  # become_user: "{{bossjones__user}}"
  ignore_errors: yes
  with_items:
    - true  # Run as vagrant


- name: install multi-git-status  - Show uncommitted, untracked and unpushed changes for multiple Git repos
  shell: |
    curl -L 'https://raw.githubusercontent.com/bossjones/multi-git-status/master/multi-git-status' > /usr/local/bin/multi-git-status
    chmod +x /usr/local/bin/multi-git-status
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/multi-git-status

# SOURCE: https://github.com/bossjones/git-summary
- name: install git-summary - Show uncommitted, untracked and unpushed changes for multiple Git repos
  shell: |
    curl -L 'https://raw.githubusercontent.com/bossjones/git-summary/master/git-summary' > /usr/local/bin/git-summary
    chmod +x /usr/local/bin/git-summary
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/git-summary

- name: install facebook/fbkutils - A variety of utilities built and maintained by Facebook's Linux Kernel Team that we wish to share with the community.
  shell: |
    git clone https://github.com/facebook/fbkutils.git ~/fbkutils
  become: '{{ item }}'
  args:
    executable: /bin/bash
    creates: '$HOME/fbkutils'
  with_items:
    - true  # Run as root
    - false



- name: "create /usr/local/bin/whatschanged.sh"
  copy:
    content: |
      #!/bin/bash
      # SOURCE: https://medium.com/@moomzni/using-tags-to-speed-up-ansible-b17b6f462c22
      # Purpose:    Wouldn't it be great if you could run ansible only for those roles that have changed since the last execution?
      #             Ansible runs are typically long-running (>5min) processes and a practical way of reasonably minimising this time
      #             is to only execute the roles that have changed since the last execution.  This script looks at the git diff
      #             between the last successful build and current head and seeks to determine which roles have changed.  We then
      #             use tags in ansible to determine which bits of the playbook to trigger.  The default behaviour if unable
      #             to complete a diff (or if its empty) is to execute all tags.
      #
      # Parameters: This script takes no explicit parameters so you can run it verbatim and the default behaviour will be to invoke
      #             all tags.  You can however supply the following environment variables:
      #              - GIT_PREVIOUS_SUCCESSFUL_COMMIT - This is git SHA of the last successful commit; this is typically provided by
      #                                                 implicitly by the jenkins git plugin.
      #              - ANSIBLE_DEPLOY_TAGS - If this tag is present this script basically does nothing; the presence of this variable
      #                                      overrides the function of this script e.g. a user requests to run specific tags
      #
      # Output: This script produces a jenkins.properties file which contains the ANSIBLE_DEPLOY_TAGS environment variable with the tags
      #         to be executed by ansible.  This is then injected into Jenkins so it is available to the build executor.
      #
      # This file always needs to exist otherwise jenkins jobs fail; remove any previously generated files and initialise a new blank one
      rm -f jenkins.properties && touch jenkins.properties
      # If the ANSIBLE_DEPLOY_TAGS environment variable has been set outside of this script then we assume the user has done this and it overrides
      # any function of this script; basically do nothing because user knows best.
      if [ ! -z "${ANSIBLE_DEPLOY_TAGS}" ]; then
        echo "Whats Changed: Tags already passed as parameters, skipping script" && exit 0
      else
        # If the variable hasn't already been set, initialise it with the default action of running all tags
        ANSIBLE_DEPLOY_TAGS="all"
      fi
      # If GIT_PREVIOUS_SUCCESSFUL_COMMIT does not exist then then perform the default action (run all tags)
      if [ -z "${GIT_PREVIOUS_SUCCESSFUL_COMMIT}" ]; then
        echo "Whats Changed: No previous successful commit detected, executing all tags"
      else
        echo "Whats Changed: Setting commit ${GIT_PREVIOUS_SUCCESSFUL_COMMIT} as the anchor point"
        # Look to see if any ./vars or ./vault_vars files are in in the git diff; VARS_CHANGED will be set to 'true' if files are found and 'false' otherwise
        VARS_CHANGED=`git diff --name-only "${GIT_PREVIOUS_SUCCESSFUL_COMMIT}" | grep -qe '^vars\/'; if [ $? -eq 0 ]; then echo true; else echo false; fi`
      # If variables have changed then the only safe assumption to make is that all tags need to be excecuted
        if [[ "${VARS_CHANGED}" == "true" ]]; then
          echo "Whats Changed: Detected global variables have changed since last successful commit, executing all tags"
        else
          # If no variables have changed then figure out specifically what roles have changed
          WHATS_CHANGED=`git diff --name-only "${GIT_PREVIOUS_SUCCESSFUL_COMMIT}" | grep -e '^roles\/' | cut -d '/' -f2 | sort | uniq | paste -sd , -`
          if [ -z "${WHATS_CHANGED}" ]; then
            echo "Whats Changed: Detected that no roles have changed, failback to executing all tags"
          else
            echo "Whats Changed: Detected roles have changed since last successful commit, selectively executing only those roles"
            ANSIBLE_DEPLOY_TAGS=$WHATS_CHANGED
          fi
        fi
      fi
      # Saving to properties file as this is what the jenkins jobs will be looking for
      echo "Whats Changed: Saving tags ${ANSIBLE_DEPLOY_TAGS} to jenkins.properties"
      echo "ANSIBLE_DEPLOY_TAGS=$ANSIBLE_DEPLOY_TAGS" > jenkins.properties


    dest: "/usr/local/bin/whatschanged.sh"
    owner: "root"
    group: "root"
    mode: 0755


# Simplistic interactive filtering tool
- name: install peco
  shell: |
    wget https://github.com/peco/peco/releases/download/v0.5.3/peco_linux_amd64.tar.gz ;
    tar xvf peco_linux_amd64.tar.gz ;
    mv peco_linux_amd64/peco /usr/local/bin/peco ;
    chmod +x /usr/local/bin/peco ;
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/peco



##############################################################################
# Install osquery
##############################################################################
# $ export OSQUERY_KEY=1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
# $ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $OSQUERY_KEY
# $ sudo add-apt-repository 'deb [arch=amd64] https://pkg.osquery.io/deb deb main'
# $ sudo apt update
# $ sudo apt install osquery

- name: 'OSQUERY: Add an apt key by id from a keyserver - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $OSQUERY_KEY'
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
    state: present

# Add specified repository into sources list using specified filename.
- name: add osquery repo
  apt_repository:
    repo: deb [arch={{sys_arch}}] https://pkg.osquery.io/deb deb main
    state: present
    update_cache: yes
    filename: osquery.list
  when: ansible_os_family == "Debian"

- name: Install osquery
  apt:
    name: "osquery"
    state: latest
    force_apt_get: yes
    update_cache: yes
    cache_valid_time: 86400 #One day
  become: '{{ item }}'
  with_items:
    - true  # Run as root


- name: source $HOME/.bashrc to root/ssh user bash_profile
  lineinfile:
    path: '{{ ansible_user_dir }}/.bash_profile'
    line: if [ -f ~/.bashrc ]; then source ~/.bashrc; fi
    regexp: source.*bashrc
    create: yes
    state: present
  retries: 10
  delay: 10
  register: result
  until: result.rc == 0
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user


- name: make sure ~/.bashrc is sourced in ~/.bash_profile
  lineinfile:
    dest: ~/.bash_profile
    regexp: source.*bashrc
    line: if [ -f ~/.bashrc ]; then source ~/.bashrc; fi

# export PATH=$PATH:/usr/local/go/bin:${HOME}/go/bin
- name: set go env. vars. and add go to path
  blockinfile:
    dest: '{{ ansible_user_dir }}/.bashrc'
    block: |

      docker-clean () {
          docker rm $(docker ps -a -q);
          docker rmi $(docker images | grep "^<none>" | awk '{print $3}')
      }

    state: present
    create: yes
    mode: 0644
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user
